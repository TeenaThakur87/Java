public class LinkedList {
    
    public static class Node{
           int data;
           Node next;
            public Node(int data){
               this.data=data;
               this.next=null;
            }
       }
   
       public static Node head;
       public static Node tail;

   
       public void addFirst(int data){
           //create new node
            Node newNode= new Node(data);
           
         
            if(head==null){
               head=tail=newNode;
               return;
           }
           
           //newNode-next=head
           newNode.next=head;
   
           //head=newNode
           head=newNode;
           
       }
       public Node findMid(){
            Node slow=head;
            Node fast=head;
            while(fast!=null && fast.next!=null){
                slow=slow.next;
                fast=fast.next.next;

            }
            return slow;
        }

        public boolean IfPalindrome(){
            if(head==null || head.next==null){
                return true;
            }
            //find mid
            Node mid=findMid();

            //reverse 2nd half
            
            Node prev=null;
            Node curr=mid;
            Node next;
            
            
            while(curr!=null){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
            }
            Node left=head;
            Node right=prev;
            while(right!=null){
            if(left.data!=right.data){
                return false;
            }     
            left=left.next;
            right=right.next;
        }
        return true;
    }

       public void print(){
       Node temp=head;
       while(temp!=null){
           System.out.print(temp.data+"->");
           temp=temp.next;
       }
       System.out.println("null");
   }
   public static void main(String[] args) { 
       LinkedList ll=new LinkedList();
       ll.addFirst(2);
       ll.addFirst(1);
       ll.addFirst(1);
       ll.addFirst(2);
       ll.print();
       System.out.println(ll.IfPalindrome());

       }
      } 
